# Как установить:

Скачиваем исходный код:
1/ git clone ssh://git@github.com/rety87nm/skin_recomends.git

2/ Скачиваем модель pth:
cd skin_recomends
wget -nc https://rety87nm.ru/share/mobilenetv2.pth -O mobilenetv2.pth

3/ Скачиваем дамп данных с текстами:
wget -nc https://rety87nm.ru/share/skin_types_storage/data.db -O data.db

*3.1/ Запускаем файл миграции, для добавления новых полей в таблицы. (миграция включена в dump_20250519.sql, поэтому этот пункт необязателен)
python3 migration.py

4/ Изменяем данные к конфиге:
cp -v config.py.example config.py
тут прописсываем токен бота если нужно

5/ Готовим виртуальное окружение:
$ cd ~
$ python3 -m venv skin_types_venv
$ cd skin_recomends
$ source ../skin_types_venv/bin/activate

6/ Устанавливаем зависимости:
pip install -r requirements.txt

7/ Запуск телеграм бота:
python3 telegram_input.py

8/ запуск веб интерфейса:
python3 flask_app.py

Описание файлов провекта:

data.db - файл базы данных sqlite3. Тут хранятся тексы рекомендации и данные пользователей.

auth.py - Модуль для авторизации пользователей. Получает пользователя из базы данных по имени или ID.
Сравнивает переданный пароль с сохранённым хэшем.
Использует встроенные методы из werkzeug.security:

generate_password_hash(password) — хеширует пароль перед сохранением в БД.
check_password_hash(hashed, password) — проверяет введённый пароль на соответствие хэшу.
Благодаря этому, даже в случае утечки базы данных, восстановить исходные пароли будет невозможно.

flask_app.py - web приложение интерфейс для рекомендаций.
    Основное веб-приложение. Использует Flask и Flask-Login для управления сессиями пользователей.
    Отвечает за:
        регистрацию и авторизацию пользователей,
        загрузку изображений и обработку,
        ML-анализ и сохранение результатов в SQLite,
        генерацию HTML-страниц и API-ответов.

    Авторизация через Flask-Login
        Авторизация реализована с помощью расширения Flask-Login. Основные элементы:
            login_manager = LoginManager() — инициализация менеджера авторизации.
            @login_manager.user_loader — функция, возвращающая пользователя по ID из базы данных.
            login_user(user) — вход пользователя (сессия).
            logout_user() — выход пользователя.
            @login_required — защита маршрутов (например, /, /analyze, /upload) от неавторизованного доступа.
            current_user — глобальный объект текущего пользователя в сессии.
        После успешной регистрации или входа пользователь перенаправляется на главную страницу /, где отображаются последние анализы.

gen_receips.py - файл генерации текстов рекомендаций с помощью LLM, использует API запросы к удаленному серверу.
    Ответ записывает в sqlite3. Чтобы изменить наполнение базы или тексты рецептов, тут нужно отредактировать промт и если необходимо
    настроить доступ к API любой LLM. yandexGPT, Gigachat...

inference.py - срипт проверки работы ИИ модели распознавания типа кожи.

mobilenetv2.pth - файл весов обученной ИИ модели

MyMobileNetV2.py - Класс описывающий архитектуру нейронной сети MobileNetv2 адаптированный 
    под задачу определения кожи.

SkinDataset.py - Класс для обработки изображений в данные пригодные для обучения и использования модели ИИ

SkinTypeChecker.py - Класс для удобного использования распознавателя

telegram_input.py - телеграм бот. использует библиотеку aiogram

train_mobilenetv2.py 

    Скрипт обучения нейронной сети. Тут представлены 3 архитектуры нейросетей:
    простая сверточная, усложненная сверточная, mobilenet. Скрипт можно использовать для дообучения модели.

    Обучение модели длилось 2 ч на GPU RTX-2060super, при 500 эпохах обучения на датасете:

    https://github.com/MdAliAhnaf/Skin_Type_Classification-Recommendation/tree/main/skin_dataset

    По 100 уникальных фото в каждой из 3 категорий acne dry oil. Точность на тестовой выборке была 91%
    MobilenetV2 обучалась с нуля, без использования предобученных весов.

    Процесс обучения:
        В процессо обучения было обнаружено что при малом количестве примеров для обучения происходит быстное переобучение. 
        На графике потерь loss на вализационной выборке начинал резко идти вверх, а train loss продолжал понижаться.
        
        Для уменьшения эффекта переобучения применена аугментация для увеличения варативности примеров.

Аугментация:
    К обучающей выборке были применены следующие трансформации: 

    Случайное горизонтальное отражение
        Зеркально отражает изображение по горизонтали с вероятностью 50%

    Случайное вертикальное отражение
        Зеркально отражает изображение по вертикали с вероятностью 50%

    Случайный поворот
        Вращает изображение на случайный угол до 30 градусов в любом направлении

    Изменение цветовых характеристик
        Меняет яркость (до ±20%)
        Меняет контрастность (до ±20%)
        Меняет насыщенность цветов (до ±20%)
        Меняет оттенок (до ±10%)

    Размытие по Гауссу
        Применяет гауссово размытие с ядром 5x5 и σ от 0.1 до 2.0
        Срабатывает с вероятностью 30%

    Изменение резкости
        Увеличивает резкость изображения в 1.5 раза
        Срабатывает с вероятностью 30%

В результате удалось отсрочить момент переобучение модели до 500 эпох.
Точность предсказания достигла ~ 90%

Интерпретация графиков:
    График сгенерирован при параметрах:
    Шаг градиентного спуска: 1e-3
    Размер пачки данных: 32
    количество эпох: 700
    
    https://rety87nm.ru/share/img/loss.png - график потерь.
    Снижение обеих значений потерь примерно до 300 эпох обучения. Далее информативность исчерпывается и график становится 
    более пологим.
    Рыжая линия почти на всем участке выше чем синяя что означает что на обучаемой выборке качество почти всегда незначительно но хуже.
    После 400 эпохи различие чуть увеличивается, при дальнейшем обучении лосс на валидации перестает парать и уходит вверх. Вывод:
    необходимо остановиться на 500 эпохе и нет смысла дальше учить

    https://rety87nm.ru/share/img/accuracy.png - график точности на валидационной выборке
    Этот график показывает какой количкосво меток правильно было предсказано из всего числа. По графику видно, что качество остановило
    свой рост на отметке 89 - 90% Так же после 600 эпохи начались колебания в сторону уменьшения качества.

    Итоговая модель обучаласть на параметрах:
    Шаг: 3e-3 

База данных:
    analysis_results - данные которые ввел поьлзователь для вычисления рекомендации:
        user_id - идентификатор зарегистрированого пользователя в системе
        age - возраст 
        gender - пол
        allergies - алерген
        label - метка, которой обозначается тип кожи 1 из 5
        probs - вероятности трех основных типов кожи
        filename - ссылка на файл который загрузил пользователь
        text_id - идентификатор рецепта, присвоенный анкете

    texts - данные с текстами рецептов по каждой комбинации параметров
        id - идентификатор
        age_part - возрастной интервал 1 - 0..20, 2 - 20..40 ...  5 - 80..~
        gender - пол
        allergen - алерген
        dom_type доминирующий тип кожи
        text - текст рекомендаций для этой комбинации 
    
    users - зарегистрированные пользователи
        id - идентифокатор пользователя
        username - Имя пользователя
        email - уникальное поле email
        password - пароль в зашифрованном виде
