# Как установить:

Скачиваем исходный код:
1/ git clone ssh://git@github.com/rety87nm/skin_recomends.git

2/ Скачиваем модель pth:
cd skin_recomends
wget -nc https://rety87nm.ru/share/mobilenetv2.pth -O mobilenetv2.pth

3/ Скачиваем дамп данных с текстами:
wget -nc https://rety87nm.ru/share/skin_types_storage/data.db -O data.db

3.1/ Запускаем файл миграции, для добавления новых полей в таблицы
python3 migration.py

4/ Изменяем данные к конфиге:
cp -v config.py.example config.py
тут прописсываем токен бота если нужно

5/ Готовим виртуальное окружение:
$ cd ~
$ python3 -m venv skin_types_venv
$ cd skin_recomends
$ source ../skin_types_venv/bin/activate

6/ Устанавливаем зависимости:
pip install -r requirements.txt

7/ Запуск телеграм бота:
python3 telegram_input.py

8/ запуск веб интерфейса:
python3 flask_app.py

Описание файлов провекта:

data.db - файл базы данных sqlite3. Тут хранятся тексы рекомендации и данные пользователей.

auth.py - Модуль для авторизации пользователей. Получает пользователя из базы данных по имени или ID.
Сравнивает переданный пароль с сохранённым хэшем.
Использует встроенные методы из werkzeug.security:
generate_password_hash(password) — хеширует пароль перед сохранением в БД.
check_password_hash(hashed, password) — проверяет введённый пароль на соответствие хэшу.
Благодаря этому, даже в случае утечки базы данных, восстановить исходные пароли будет невозможно.

flask_app.py - web приложение интерфейс для рекомендаций.
    Основное веб-приложение. Использует Flask и Flask-Login для управления сессиями пользователей.
    Отвечает за:
        регистрацию и авторизацию пользователей,
        загрузку изображений и обработку,
        ML-анализ и сохранение результатов в SQLite,
        генерацию HTML-страниц и API-ответов.

    Авторизация через Flask-Login
        Авторизация реализована с помощью расширения Flask-Login. Основные элементы:
            login_manager = LoginManager() — инициализация менеджера авторизации.
            @login_manager.user_loader — функция, возвращающая пользователя по ID из базы данных.
            login_user(user) — вход пользователя (сессия).
            logout_user() — выход пользователя.
            @login_required — защита маршрутов (например, /, /analyze, /upload) от неавторизованного доступа.
            current_user — глобальный объект текущего пользователя в сессии.
        После успешной регистрации или входа пользователь перенаправляется на главную страницу /, где отображаются последние анализы.

gen_receips.py - файл генерации текстов рекомендаций с помощью LLM, использует API запросы к удаленному серверу.
    Ответ записывает в sqlite3. Чтобы изменить наполнение базы или тексты рецептов, тут нужно отредактировать промт и если необходимо
    настроить доступ к API любой LLM. yandexGPT, Gigachat...

inference.py - срипт проверки работы ИИ модели распознавания типа кожи.

mobilenetv2.pth - файл весов обученной ИИ модели

MyMobileNetV2.py - Класс описывающий архитектуру нейронной сети MobileNetv2 адаптированный 
    под задачу определения кожи.

SkinDataset.py - Класс для обработки изображений в данные пригодные для обучения и использования модели ИИ

SkinTypeChecker.py - Класс для удобного использования распознавателя

telegram_input.py - телеграм бот. использует библиотеку aiogram

train_mobilenetv2.py 

    Скрипт обучения нейронной сети. Тут представлены 3 архитектуры нейросетей:
    простая сверточная, усложненная сверточная, mobilenet. Скрипт можно использовать для дообучения модели.

    Обучение модели длилось 2 ч на GPU RTX-2060super, при 100 эпохах обучения на датасете:

    https://github.com/MdAliAhnaf/Skin_Type_Classification-Recommendation/tree/main/skin_dataset

    По 100 уникальных фото в каждой из 3 категорий acne dry oil. Точность на тестовой выборке была 91%
    MobilenetV2 обучалась с нуля, без использования предобученных весов.

